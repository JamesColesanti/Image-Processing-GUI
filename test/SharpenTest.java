import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import model.files.PPM;
import model.filters.IFilter;
import model.filters.Sharpen;
import model.image.Image;
import model.image.ImageInterface;
import org.junit.Before;
import org.junit.Test;

/**
 * Test class for Sharpen. This class tests that when images are filtered using the Sharpen function
 * object, they are properly sharpened. Each new pixel in the image should have a new color value
 * determined by the transpose matrix and the math done in the Sharpen class.
 */
public class SharpenTest {

  private IFilter sharpen;
  private Image sharpenTestImage;
  private ImageInterface sharpenImportedTest;

  // initialization of data to be used in tests
  @Before
  public void initData() {
    List<List<Integer>> red = new ArrayList<>(Arrays.asList(
        new ArrayList<>(Arrays.asList(120, 89, 0)),
        new ArrayList<>(Arrays.asList(13, 200, 0)),
        new ArrayList<>(Arrays.asList(255, 180, 0))));
    List<List<Integer>> green = new ArrayList<>(Arrays.asList(
        new ArrayList<>(Arrays.asList(255, 89, 0)),
        new ArrayList<>(Arrays.asList(128, 63, 0)),
        new ArrayList<>(Arrays.asList(11, 89, 0))));
    List<List<Integer>> blue = new ArrayList<>(Arrays.asList(
        new ArrayList<>(Arrays.asList(120, 89, 21)),
        new ArrayList<>(Arrays.asList(120, 89, 0)),
        new ArrayList<>(Arrays.asList(99, 89, 255))));
    this.sharpenImportedTest = new PPM().importFile("res/TestingImage.ppm");
    this.sharpenTestImage = new Image(red, green, blue);
    this.sharpen = new Sharpen();
  }

  /*
  Tests for newColorValsAt()
   */

  // Tests that an exception is thrown when a negative x is given
  @Test(expected = IllegalArgumentException.class)
  public void sharpenNegativeX() {
    sharpen.newColorValsAt(-1, 0,  this.sharpenImportedTest);
  }

  // Tests that an exception is thrown when a negative y is given
  @Test(expected = IllegalArgumentException.class)
  public void sharpenNegativeY() {
    sharpen.newColorValsAt(1, -1,  this.sharpenImportedTest);
  }

  // Tests that an exception is thrown when a negative x and y are given
  @Test(expected = IllegalArgumentException.class)
  public void sharpenNegativeXAndY() {
    sharpen.newColorValsAt(-3, -9,  this.sharpenImportedTest);
  }

  // Tests that an exception is thrown when a x out of of the width is given
  @Test(expected = IllegalArgumentException.class)
  public void sharpenTooBigY() {
    sharpen.newColorValsAt(0, 3,  this.sharpenTestImage);
  }

  // Tests that an exception is thrown when a x out of of the height is given
  @Test(expected = IllegalArgumentException.class)
  public void sharpenTooBigX() {
    sharpen.newColorValsAt(3, 0,  this.sharpenTestImage);
  }

  // Tests that an exception is thrown when passed a null image
  @Test(expected = IllegalArgumentException.class)
  public void sharpenNullImageWasPassed() {
    sharpen.newColorValsAt(0, 0,  null);
  }

  // Tests that when sharpen is called on the top left pixel it works as expected
  @Test
  public void sharpenCornerPixels() {
    assertEquals(0,
        sharpen.newColorValsAt(0, 2, this.sharpenTestImage).get(0).intValue());
    assertEquals(0,
        sharpen.newColorValsAt(2, 2, this.sharpenTestImage).get(1).intValue());
    assertEquals(134,
        sharpen.newColorValsAt(0, 0, this.sharpenTestImage).get(2).intValue());
    assertEquals(255,
        sharpen.newColorValsAt(2, 0, this.sharpenTestImage).get(0).intValue());
  }

  // Tests that when sharpen is called on the top left pixel it works as expected with a ppm
  @Test
  public void sharpenCornerPixelsTestImage() {
    assertEquals(255,
        sharpen.newColorValsAt(0, this.sharpenImportedTest.getImageHeight() - 1,
            this.sharpenImportedTest).get(0).intValue());
    assertEquals(13,
        sharpen.newColorValsAt(this.sharpenImportedTest.getImageWidth() - 1,
            this.sharpenImportedTest.getImageHeight() - 1,
            this.sharpenImportedTest).get(1).intValue());
    assertEquals(8,
        sharpen.newColorValsAt(0, 0, this.sharpenImportedTest).get(2).intValue());
    assertEquals(12,
        sharpen.newColorValsAt(this.sharpenImportedTest.getImageWidth() - 1, 0,
            this.sharpenImportedTest).get(0).intValue());
  }

  // Tests that when sharpen is called on the top middle pixel it works as expected
  @Test
  public void sharpenPixelInMiddleOfSide() {
    assertEquals(223,
        sharpen.newColorValsAt(1, 0, this.sharpenTestImage).get(0).intValue());
    assertEquals(13,
        sharpen.newColorValsAt(1, 2, this.sharpenTestImage).get(1).intValue());
    assertEquals(134,
        sharpen.newColorValsAt(0, 0, this.sharpenTestImage).get(2).intValue());
    assertEquals(255,
        sharpen.newColorValsAt(2, 0, this.sharpenTestImage).get(0).intValue());
  }

  // Tests that when sharpen is called on the top left pixel it works as expected with a ppm
  @Test
  public void sharpenPixelsInMiddleOfSideTestImage() {
    assertEquals(6,
        sharpen.newColorValsAt(13,0,
            this.sharpenImportedTest).get(0).intValue());
    assertEquals(212,
        sharpen.newColorValsAt(0,30,
            this.sharpenImportedTest).get(1).intValue());
    assertEquals(18,
        sharpen.newColorValsAt(20, this.sharpenImportedTest.getImageHeight() - 1,
            this.sharpenImportedTest).get(2).intValue());
    assertEquals(68,
        sharpen.newColorValsAt(this.sharpenImportedTest.getImageWidth() - 1, 20,
            this.sharpenImportedTest).get(0).intValue());
  }

  // Tests that when sharpen is called on the middle pixel it works as expected
  @Test
  public void sharpenMiddlePix() {
    assertEquals(204,
        sharpen.newColorValsAt(1, 1, this.sharpenTestImage).get(1).intValue());
  }

  // Tests that when sharpen is called on the middle pixel it works as expected
  @Test
  public void sharpenMiddlePixTestImage() {
    assertEquals(39,
        sharpen.newColorValsAt(20, 20, this.sharpenImportedTest).get(2).intValue());
  }
}